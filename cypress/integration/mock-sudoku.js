/// <reference types="cypress" />

const initialBoard = [
  '0',
  '0',
  '9',
  '0',
  '2',
  '0',
  '0',
  '0',
  '5',
  '0',
  '1',
  '4',
  '0',
  '0',
  '0',
  '0',
  '8',
  '2',
  '2',
  '8',
  '3',
  '4',
  '1',
  '5',
  '0',
  '0',
  '9',
  '0',
  '3',
  '1',
  '2',
  '5',
  '4',
  '0',
  '0',
  '7',
  '7',
  '4',
  '2',
  '0',
  '9',
  '0',
  '8',
  '5',
  '3',
  '9',
  '6',
  '0',
  '0',
  '7',
  '0',
  '2',
  '0',
  '0',
  '3',
  '9',
  '8',
  '0',
  '0',
  '2',
  '5',
  '7',
  '6',
  '1',
  '2',
  '0',
  '0',
  '8',
  '0',
  '0',
  '3',
  '0',
  '4',
  '0',
  '6',
  '0',
  '0',
  '7',
  '0',
  '0',
  '0',
]

const solvedBoard = [
  '6',
  '7',
  '9',
  '3',
  '2',
  '8',
  '4',
  '1',
  '5',
  '5',
  '1',
  '4',
  '7',
  '6',
  '9',
  '3',
  '8',
  '2',
  '2',
  '8',
  '3',
  '4',
  '1',
  '5',
  '7',
  '6',
  '9',
  '8',
  '3',
  '1',
  '2',
  '5',
  '4',
  '6',
  '9',
  '7',
  '7',
  '4',
  '2',
  '6',
  '9',
  '1',
  '8',
  '5',
  '3',
  '9',
  '6',
  '5',
  '8',
  '7',
  '3',
  '2',
  '4',
  '1',
  '3',
  '9',
  '8',
  '1',
  '4',
  '2',
  '5',
  '7',
  '6',
  '1',
  '2',
  '7',
  '5',
  '8',
  '6',
  '9',
  '3',
  '4',
  '4',
  '5',
  '6',
  '9',
  '3',
  '7',
  '1',
  '2',
  '8',
]

import { replaceWebPackModule } from './utils'

describe('Sudoku', () => {
  it('mocks the board', () => {
    // have to use the actual values in the mock function
    // because it will be evaluated via text
    replaceWebPackModule('/solver/UniqueSudoku.js', null, {
      getUniqueSudoku: () => [
        [
          '0',
          '0',
          '9',
          '0',
          '2',
          '0',
          '0',
          '0',
          '5',
          '0',
          '1',
          '4',
          '0',
          '0',
          '0',
          '0',
          '8',
          '2',
          '2',
          '8',
          '3',
          '4',
          '1',
          '5',
          '0',
          '0',
          '9',
          '0',
          '3',
          '1',
          '2',
          '5',
          '4',
          '0',
          '0',
          '7',
          '7',
          '4',
          '2',
          '0',
          '9',
          '0',
          '8',
          '5',
          '3',
          '9',
          '6',
          '0',
          '0',
          '7',
          '0',
          '2',
          '0',
          '0',
          '3',
          '9',
          '8',
          '0',
          '0',
          '2',
          '5',
          '7',
          '6',
          '1',
          '2',
          '0',
          '0',
          '8',
          '0',
          '0',
          '3',
          '0',
          '4',
          '0',
          '6',
          '0',
          '0',
          '7',
          '0',
          '0',
          '0',
        ],
        [
          '6',
          '7',
          '9',
          '3',
          '2',
          '8',
          '4',
          '1',
          '5',
          '5',
          '1',
          '4',
          '7',
          '6',
          '9',
          '3',
          '8',
          '2',
          '2',
          '8',
          '3',
          '4',
          '1',
          '5',
          '7',
          '6',
          '9',
          '8',
          '3',
          '1',
          '2',
          '5',
          '4',
          '6',
          '9',
          '7',
          '7',
          '4',
          '2',
          '6',
          '9',
          '1',
          '8',
          '5',
          '3',
          '9',
          '6',
          '5',
          '8',
          '7',
          '3',
          '2',
          '4',
          '1',
          '3',
          '9',
          '8',
          '1',
          '4',
          '2',
          '5',
          '7',
          '6',
          '1',
          '2',
          '7',
          '5',
          '8',
          '6',
          '9',
          '3',
          '4',
          '4',
          '5',
          '6',
          '9',
          '3',
          '7',
          '1',
          '2',
          '8',
        ],
      ],
    })
    cy.visit('/')
  })

  it('mocks the board by preparing function as a string', () => {
    const getUniqueSudoku = new Function(`
      return [
        ${JSON.stringify(initialBoard)},
        ${JSON.stringify(solvedBoard)}
      ]
    `)

    replaceWebPackModule('/solver/UniqueSudoku.js', null, {
      getUniqueSudoku,
    })
    cy.visit('/')
  })

  it('mocks the board by passing a function reference', () => {
    cy.on('window:before:load', (win) => {
      win.__getUniqueSudoku = () => [initialBoard, solvedBoard]
    })

    replaceWebPackModule('/solver/UniqueSudoku.js', null, {
      getUniqueSudoku: 'window.__getUniqueSudoku',
    })
    cy.visit('/')
  })

  it('mocks the board by passing a cy stub', () => {
    cy.on('window:before:load', (win) => {
      win.__getUniqueSudoku = cy
        .stub()
        .returns([initialBoard, solvedBoard])
        .as('getUniqueSudoku')
    })

    replaceWebPackModule('/solver/UniqueSudoku.js', null, {
      getUniqueSudoku: 'window.__getUniqueSudoku',
    })
    cy.visit('/')
    // confirm the game has called the mock function
    cy.get('@getUniqueSudoku').should('have.been.calledWith', 'Easy')
  })

  it.only('without any mocks', () => {
    cy.visit('/')
  })
})
